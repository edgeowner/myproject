<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.huboot.business.dao.account.impl.SubAccountBaseDaoImpl">
    <resultMap id="zac_sub_account_base_map" type="com.huboot.business.domain.account.SubAccountBaseDomain">
        <result property="id" column="id" javaType="java.lang.Long"/>
        <result property="createTime" column="create_time"/>
        <result property="modifyTime" column="modify_time"/>
        <result property="accountId" column="account_id"/>
        <result property="subAccountId" column="sub_account_id"/>
        <result property="balance" column="balance"/>
        <result property="usableBalance" column="usable_balance"/>
        <result property="unusableBalance" column="unusable_balance"/>
        <result property="type" column="type"/>
        <result property="status" column="status"/>
        <result property="belongToAccountId" column="belong_to_account_id"/>
        <result property="expireDate" column="expire_date"/>
        <result property="version" column="version"/>
        <result property="creatorId" column="creator_id"/>
        <result property="modifierId" column="modifier_id"/>
        <result property="recordStatus" column="record_status"/>
    </resultMap>

    <sql id="Base_Column_List">
        `id`
        ,`create_time`
        ,`modify_time`
        ,`account_id`
        ,`sub_account_id`
        ,`balance`
        ,`usable_balance`
        ,`unusable_balance`
        ,`type`
        ,`status`
        ,`belong_to_account_id`
        ,`expire_date`
        ,`version`
        ,`creator_id`
        ,`modifier_id`
        ,`record_status`
    </sql>

    <sql id="Base_Mapper_Column_List">
        `id` as `id`
        ,`create_time` as `createTime`
        ,`modify_time` as `modifyTime`
        ,`account_id` as `accountId`
        ,`sub_account_id` as `subAccountId`
        ,`balance` as `balance`
        ,`usable_balance` as `usableBalance`
        ,`unusable_balance` as `unusableBalance`
        ,`type` as `type`
        ,`status` as `status`
        ,`belong_to_account_id` as `belongToAccountId`
        ,`expire_date` as `expireDate`
        ,`version` as `version`
        ,`creator_id` as `creatorId`
        ,`modifier_id` as `modifierId`
        ,`record_status` as `recordStatus`
    </sql>

    <insert id="create" parameterType="com.huboot.business.domain.account.SubAccountBaseDomain">
        insert into zac_sub_account_base (
        <trim prefixOverrides=",">
            id
            <if test="accountId != null">
                ,`account_id`
            </if>
            <if test="subAccountId != null">
                ,`sub_account_id`
            </if>
            <if test="balance != null">
                ,`balance`
            </if>
            <if test="usableBalance != null">
                ,`usable_balance`
            </if>
            <if test="unusableBalance != null">
                ,`unusable_balance`
            </if>
            <if test="type != null">
                ,`type`
            </if>
            <if test="status != null">
                ,`status`
            </if>
            <if test="belongToAccountId != null">
                ,`belong_to_account_id`
            </if>
            <if test="expireDate != null">
                ,`expire_date`
            </if>
            <if test="version != null">
                ,`version`
            </if>
            <if test="creatorId != null">
                ,`creator_id`
            </if>
            <if test="modifierId != null">
                ,`modifier_id`
            </if>
            <if test="recordStatus != null">
                ,`record_status`
            </if>
        </trim>
        ) values (
        <trim prefixOverrides=",">
            #{id}
            <if test="accountId != null">
                , #{accountId}
            </if>
            <if test="subAccountId != null">
                , #{subAccountId}
            </if>
            <if test="balance != null">
                , #{balance}
            </if>
            <if test="usableBalance != null">
                , #{usableBalance}
            </if>
            <if test="unusableBalance != null">
                , #{unusableBalance}
            </if>
            <if test="type != null">
                , #{type}
            </if>
            <if test="status != null">
                , #{status}
            </if>
            <if test="belongToAccountId != null">
                , #{belongToAccountId}
            </if>
            <if test="expireDate != null">
                , #{expireDate}
            </if>
            <if test="version != null">
                , #{version}
            </if>
            <if test="creatorId != null">
                , #{creatorId}
            </if>
            <if test="modifierId != null">
                , #{modifierId}
            </if>
            <if test="recordStatus != null">
                , #{recordStatus}
            </if>
        </trim>
        )
    </insert>
    <update id="update" parameterType="com.huboot.business.domain.account.SubAccountBaseDomain">
        update zac_sub_account_base
        <set>
            `account_id` =#{accountId},
            `sub_account_id` =#{subAccountId},
            `balance` =#{balance},
            `usable_balance` =#{usableBalance},
            `unusable_balance` =#{unusableBalance},
            `type` =#{type},
            `status` =#{status},
            `belong_to_account_id` =#{belongToAccountId},
            `expire_date` =#{expireDate},
            `version` =#{version},
            `modifier_id` =#{modifierId},
        </set>
        where
        `id` = #{id}
    </update>
    <update id="merge" parameterType="com.huboot.business.domain.account.SubAccountBaseDomain">
        update zac_sub_account_base
        <set>
            <if test="accountId != null">
                `account_id` = #{accountId},
            </if>
            <if test="subAccountId != null">
                `sub_account_id` = #{subAccountId},
            </if>
            <if test="balance != null">
                `balance` = #{balance},
            </if>
            <if test="usableBalance != null">
                `usable_balance` = #{usableBalance},
            </if>
            <if test="unusableBalance != null">
                `unusable_balance` = #{unusableBalance},
            </if>
            <if test="type != null">
                `type` = #{type},
            </if>
            <if test="status != null">
                `status` = #{status},
            </if>
            <if test="belongToAccountId != null">
                `belong_to_account_id` = #{belongToAccountId},
            </if>
            <if test="expireDate != null">
                `expire_date` = #{expireDate},
            </if>
            <if test="version != null">
                `version` = #{version},
            </if>
            <if test="modifierId != null">
                `modifier_id` = #{modifierId},
            </if>
        </set>
        where
        `id` = #{id}
    </update>

    <update id="mergeByBeanProp" parameterType="map">
        update zac_sub_account_base
        <set>
            <if test="tage.accountId != null">
                `account_id` = #{tage.accountId},
            </if>
            <if test="tage.subAccountId != null">
                `sub_account_id` = #{tage.subAccountId},
            </if>
            <if test="tage.balance != null">
                `balance` = #{tage.balance},
            </if>
            <if test="tage.usableBalance != null">
                `usable_balance` = #{tage.usableBalance},
            </if>
            <if test="tage.unusableBalance != null">
                `unusable_balance` = #{tage.unusableBalance},
            </if>
            <if test="tage.type != null">
                `type` = #{tage.type},
            </if>
            <if test="tage.status != null">
                `status` = #{tage.status},
            </if>
            <if test="tage.belongToAccountId != null">
                `belong_to_account_id` = #{tage.belongToAccountId},
            </if>
            <if test="tage.expireDate != null">
                `expire_date` = #{tage.expireDate},
            </if>
            <if test="tage.version != null">
                `version` = #{tage.version},
            </if>
            <if test="tage.modifierId != null">
                `modifier_id` = #{tage.modifierId},
            </if>
        </set>
        where `record_status`!=0
        <if test="sour.id != null">
            and `id` = #{sour.id}
        </if>
        <if test="sour.accountId != null">
            and `account_id` = #{sour.accountId}
        </if>
        <if test="sour.subAccountId != null">
            and `sub_account_id` = #{sour.subAccountId}
        </if>
        <if test="sour.type != null">
            and `type` = #{sour.type}
        </if>
        <if test="sour.status != null">
            and `status` = #{sour.status}
        </if>
        <if test="sour.belongToAccountId != null">
            and `belong_to_account_id` = #{sour.belongToAccountId}
        </if>
        <if test="sour.version != null">
            and `version` = #{sour.version}
        </if>
        <if test="sour.creatorId != null">
            and `creator_id` = #{sour.creatorId}
        </if>
        <if test="sour.modifierId != null">
            and `modifier_id` = #{sour.modifierId}
        </if>
        <if test="sour.recordStatus != null">
            and `record_status` = #{sour.recordStatus}
        </if>
    </update>

    <delete id="remove" parameterType="Long">
        update zac_sub_account_base
        <set>
            `record_status` = 0
        </set>
        where
        `id` = #{id}
    </delete>
    <select id="findAll" resultMap="zac_sub_account_base_map">
        select
        <include refid="Base_Column_List"/>
        from zac_sub_account_base where `record_status`!=0
    </select>

    <select id="find" resultMap="zac_sub_account_base_map" parameterType="Long">
        select
        <include refid="Base_Column_List"/>
        from zac_sub_account_base
        where
        `id` = #{id}
        and `record_status`!=0
    </select>
    <select id="findByPKList" resultMap="zac_sub_account_base_map" parameterType="List">
        select
        <include refid="Base_Column_List"/>
        from zac_sub_account_base
        where
        `id` in
    <foreach collection="list" item="key" open="(" separator="," close=")">
        #{key}
    </foreach>
        and `record_status`!=0

    </select>

    <select id="findCountByBeanProp" parameterType="com.huboot.business.domain.account.SubAccountBaseDomain" resultType="Integer">
        select count(1)
        as count
        from zac_sub_account_base
        where `record_status`!=0
        <if test="id != null">
            and `id` = #{id}
        </if>
        <if test="accountId != null">
            and `account_id` = #{accountId}
        </if>
        <if test="subAccountId != null">
            and `sub_account_id` = #{subAccountId}
        </if>
        <if test="type != null">
            and `type` = #{type}
        </if>
        <if test="status != null">
            and `status` = #{status}
        </if>
        <if test="belongToAccountId != null">
            and `belong_to_account_id` = #{belongToAccountId}
        </if>
        <if test="version != null">
            and `version` = #{version}
        </if>
        <if test="creatorId != null">
            and `creator_id` = #{creatorId}
        </if>
        <if test="modifierId != null">
            and `modifier_id` = #{modifierId}
        </if>
        <if test="recordStatus != null">
            and `record_status` = #{recordStatus}
        </if>
    </select>

    <select id="findByBeanProp" parameterType="com.huboot.business.domain.account.SubAccountBaseDomain" resultMap="zac_sub_account_base_map">
        select
        <include refid="Base_Column_List"/>
        from zac_sub_account_base
        where `record_status`!=0
        <if test="id != null">
            and `id` = #{id}
        </if>
        <if test="accountId != null">
            and `account_id` = #{accountId}
        </if>
        <if test="subAccountId != null">
            and `sub_account_id` = #{subAccountId}
        </if>
        <if test="type != null">
            and `type` = #{type}
        </if>
        <if test="status != null">
            and `status` = #{status}
        </if>
        <if test="belongToAccountId != null">
            and `belong_to_account_id` = #{belongToAccountId}
        </if>
        <if test="version != null">
            and `version` = #{version}
        </if>
        <if test="creatorId != null">
            and `creator_id` = #{creatorId}
        </if>
        <if test="modifierId != null">
            and `modifier_id` = #{modifierId}
        </if>
        <if test="recordStatus != null">
            and `record_status` = #{recordStatus}
        </if>
    </select>

    <select id="findByBeanPropWithOrder" parameterType="com.huboot.business.domain.account.SubAccountBaseDomain" resultMap="zac_sub_account_base_map">
        select
        <include refid="Base_Column_List"/>
        from zac_sub_account_base
        where `record_status`!=0
        <if test="dom.id != null">
            and `id` = #{dom.id}
        </if>
        <if test="dom.accountId != null">
            and `account_id` = #{dom.accountId}
        </if>
        <if test="dom.subAccountId != null">
            and `sub_account_id` = #{dom.subAccountId}
        </if>
        <if test="dom.type != null">
            and `type` = #{dom.type}
        </if>
        <if test="dom.status != null">
            and `status` = #{dom.status}
        </if>
        <if test="dom.belongToAccountId != null">
            and `belong_to_account_id` = #{dom.belongToAccountId}
        </if>
        <if test="dom.version != null">
            and `version` = #{dom.version}
        </if>
        <if test="dom.creatorId != null">
            and `creator_id` = #{dom.creatorId}
        </if>
        <if test="dom.modifierId != null">
            and `modifier_id` = #{dom.modifierId}
        </if>
        <if test="dom.recordStatus != null">
            and `record_status` = #{dom.recordStatus}
        </if>
        order by
        <foreach collection="compositeOrderList" item="item" index="index"
                 separator=",">
            ${item.colName} ${item.direction}
        </foreach>
    </select>

    <select id="findForPager" parameterType="map" resultMap="zac_sub_account_base_map">
        select
        <include refid="Base_Column_List"/>
        from zac_sub_account_base where `record_status`!=0
        <if test="id != null">
            and `id` = #{id}
        </if>
        <if test="accountId != null">
            and `account_id` = #{accountId}
        </if>
        <if test="subAccountId != null">
            and `sub_account_id` = #{subAccountId}
        </if>
        <if test="type != null">
            and `type` = #{type}
        </if>
        <if test="status != null">
            and `status` = #{status}
        </if>
        <if test="belongToAccountId != null">
            and `belong_to_account_id` = #{belongToAccountId}
        </if>
        <if test="version != null">
            and `version` = #{version}
        </if>
        <if test="creatorId != null">
            and `creator_id` = #{creatorId}
        </if>
        <if test="modifierId != null">
            and `modifier_id` = #{modifierId}
        </if>
        <if test="recordStatus != null">
            and `record_status` = #{recordStatus}
        </if>
        limit #{startNum},#{pageSize}
    </select>
    <select id="findForPagerCount" parameterType="com.huboot.business.domain.account.SubAccountBaseDomain" resultType="Integer">
        select count(1) as count from zac_sub_account_base where `record_status`!=0
        <if test="id != null">
            and `id` = #{id}
        </if>
        <if test="accountId != null">
            and `account_id` = #{accountId}
        </if>
        <if test="subAccountId != null">
            and `sub_account_id` = #{subAccountId}
        </if>
        <if test="type != null">
            and `type` = #{type}
        </if>
        <if test="status != null">
            and `status` = #{status}
        </if>
        <if test="belongToAccountId != null">
            and `belong_to_account_id` = #{belongToAccountId}
        </if>
        <if test="version != null">
            and `version` = #{version}
        </if>
        <if test="creatorId != null">
            and `creator_id` = #{creatorId}
        </if>
        <if test="modifierId != null">
            and `modifier_id` = #{modifierId}
        </if>
        <if test="recordStatus != null">
            and `record_status` = #{recordStatus}
        </if>
    </select>

    <select id="dyFindForPager" parameterType="map" resultMap="zac_sub_account_base_map">
        select
        <include refid="Base_Column_List"/>
        <if test="group_by != null">
            ,count(1) as groupCount
        </if>
        from zac_sub_account_base where `record_status`!=0
        <if test="conditionList != null">
            <foreach collection="conditionList" item="item" index="index">
                <choose>
                    <when test="item.dbOp == 'in' ">
                        and `${item.colName}` IN
                        <foreach collection="item.value" item="key" open="(" separator="," close=")">
                            #{key}
                        </foreach>
                    </when>
                    <when test="item.dbOp == 'like' ">
                        and `${item.colName}` like #{item.value}
                    </when>
                    <otherwise>
                        and `${item.colName}` ${item.dbOp} #{item.value}
                    </otherwise>
                </choose>
            </foreach>
        </if>
        <if test="group_by != null">
            group by
            <foreach collection="group_by" item="item" index="index" separator=",">
                ${item}
            </foreach>
        </if>
        <if test="order != null">
            order by
            <foreach collection="order" item="item" index="index" separator=",">
                `${item}`
            </foreach>
        </if>
        <if test="direction != null">
            ${direction}
        </if>
        <if test="compositeOrderList != null">
            order by
            <foreach collection="compositeOrderList" item="item" index="index"
                     separator=",">
                ${item.colName} ${item.direction}
            </foreach>
        </if>
        limit #{startNum},#{pageSize}
    </select>
    <select id="dyFindForPagerCount" parameterType="map" resultType="Integer">
        <if test="group_by != null">
            select count(1) group_count
            from(
        </if>
        select count(1) as count
        from zac_sub_account_base
        where `record_status`!=0
        <if test="conditionList != null">
            <foreach collection="conditionList" item="item" index="index">
                <choose>
                    <when test="item.dbOp == 'in' ">
                        and `${item.colName}` IN
                        <foreach collection="item.value" item="key" open="(" separator="," close=")">
                            #{key}
                        </foreach>
                    </when>
                    <when test="item.dbOp == 'like' ">
                        and `${item.colName}` like #{item.value}
                    </when>
                    <otherwise>
                        and `${item.colName}` ${item.dbOp} #{item.value}
                    </otherwise>
                </choose>
            </foreach>
        </if>
        <if test="group_by != null">
            group by
            <foreach collection="group_by" item="item" index="index" separator=",">
                ${item}
            </foreach>
            ) as group_table
        </if>
    </select>

    <select id="dyFindForPagerMap" parameterType="map" resultType="map">
        select
        <if test="expressionMap != null">
            <foreach collection="expressionMap" item="item" index="index" separator=",">
                ${item} as ${index}
            </foreach>
        </if>
        from zac_sub_account_base where `record_status`!=0
        <if test="conditionList != null">
            <foreach collection="conditionList" item="item" index="index">
                <choose>
                    <when test="item.dbOp == 'in' ">
                        and `${item.colName}` IN
                        <foreach collection="item.value" item="key" open="(" separator="," close=")">
                            #{key}
                        </foreach>
                    </when>
                    <when test="item.dbOp == 'like' ">
                        and `${item.colName}` like #{item.value}
                    </when>
                    <otherwise>
                        and `${item.colName}` ${item.dbOp} #{item.value}
                    </otherwise>
                </choose>
            </foreach>
        </if>
        <if test="group_by != null">
            group by
            <foreach collection="group_by" item="item" index="index" separator=",">
                ${item}
            </foreach>
        </if>
    </select>

    <select id="findForPagerMap" parameterType="map" resultType="map">
        select
        <include refid="Base_Mapper_Column_List"/>
        from zac_sub_account_base
        where `record_status`!=0
        <if test="conditionList != null">
            <foreach collection="conditionList" item="item" index="index">
                <choose>
                    <when test="item.dbOp == 'in' ">
                        and ${item.colName} IN
                        <foreach collection="item.value" item="key" open="(" separator="," close=")">
                            #{key}
                        </foreach>
                    </when>
                    <when test="item.dbOp == 'like' ">
                        and ${item.colName} like #{item.value}
                    </when>
                    <otherwise>
                        and ${item.colName} ${item.dbOp} #{item.value}
                    </otherwise>
                </choose>
            </foreach>
        </if>
        <if test="order != null">
            order by
            <foreach collection="order" item="item" index="index" separator=",">
                ${item}
            </foreach>
        </if>
        <if test="direction != null">
            ${direction}
        </if>
        <if test="compositeOrderList != null">
            order by
            <foreach collection="compositeOrderList" item="item" index="index"
                     separator=",">
                ${item.colName} ${item.direction}
            </foreach>
        </if>
        limit #{startNum},#{pageSize}
    </select>
    <select id="findForPagerMapCount" parameterType="map" resultType="Integer">
        select count(1) as count
        from zac_sub_account_base
        where `record_status`!=0
        <if test="conditionList != null">
            <foreach collection="conditionList" item="item" index="index">
                <choose>
                    <when test="item.dbOp == 'in' ">
                        and ${item.colName} IN
                        <foreach collection="item.value" item="key" open="(" separator="," close=")">
                            #{key}
                        </foreach>
                    </when>
                    <when test="item.dbOp == 'like' ">
                        and ${item.colName} like #{item.value}
                    </when>
                    <otherwise>
                        and ${item.colName} ${item.dbOp} #{item.value}
                    </otherwise>
                </choose>
            </foreach>
        </if>
    </select>
    <select id="countWithGroupBy" parameterType="map" resultType="map">
        select
        count(1) as count
        <if test="group_by != null">
            <foreach collection="group_by" item="item" index="index" open=","
                     separator=",">
                ${item}
            </foreach>
        </if>
        from zac_sub_account_base where `record_status`!=0
        <if test="conditionList != null">
            <foreach collection="conditionList" item="item" index="index">
                <choose>
                    <when test="item.dbOp == 'in' ">
                        and ${item.colName} IN
                        <foreach collection="item.value" item="key" open="(" separator="," close=")">
                            #{key}
                        </foreach>
                    </when>
                    <when test="item.dbOp == 'like' ">
                        and ${item.colName} like #{item.value}
                    </when>
                    <otherwise>
                        and ${item.colName} ${item.dbOp} #{item.value}
                    </otherwise>
                </choose>
            </foreach>
        </if>
        <if test="group_by != null">
            group by
            <foreach collection="group_by" item="item" index="index" separator=",">
                ${item}
            </foreach>
        </if>
        <if test="order != null">
            order by
            <foreach collection="order" item="item" index="index" separator=",">
                ${item}
            </foreach>
        </if>
        <if test="direction != null">
            ${direction}
        </if>
        <if test="compositeOrderList != null">
            order by
            <foreach collection="compositeOrderList" item="item" index="index" separator=",">
                ${item.colName} ${item.direction}
            </foreach>
        </if>
    </select>

    <select id="findForMap" parameterType="map" resultType="map">
        select
        <if test="expressionMap != null">
            <foreach collection="expressionMap" item="item" index="index" separator=",">
                ${item} as ${index}
            </foreach>
        </if>
        from zac_sub_account_base where `record_status`!=0
        <if test="conditionList != null">
            <foreach collection="conditionList" item="item" index="index">
                <choose>
                    <when test="item.dbOp == 'in' ">
                        and `${item.colName}` IN
                        <foreach collection="item.value" item="key" open="(" separator="," close=")">
                            #{key}
                        </foreach>
                    </when>
                    <when test="item.dbOp == 'like' ">
                        and `${item.colName}` like #{item.value}
                    </when>
                    <otherwise>
                        and `${item.colName}` ${item.dbOp} #{item.value}
                    </otherwise>
                </choose>
            </foreach>
        </if>
        <if test="group_by != null">
            group by
            <foreach collection="group_by" item="item" index="index" separator=",">
                ${item}
            </foreach>
        </if>
    </select>


    <!-- 根据条件查询账户中心-子账户基础信息管理列表 -->
    <select id="findByAdminQueryForPager" parameterType="map" resultMap="zac_sub_account_base_map">
        select distinct
        subAccountBase.`id`
        ,subAccountBase.`create_time`
        ,subAccountBase.`modify_time`
        ,subAccountBase.`account_id`
        ,subAccountBase.`sub_account_id`
        ,subAccountBase.`balance`
        ,subAccountBase.`type`
        ,subAccountBase.`status`
        ,subAccountBase.`version`
        ,subAccountBase.`expire_date`
        ,subAccountBase.`creator_id`
        ,subAccountBase.`modifier_id`
        ,subAccountBase.`record_status`
        from zac_sub_account_base subAccountBase
        left join zac_account_base accountBase on accountBase.`account_id` = subAccountBase.`account_id` and accountBase.`record_status` != 0
        left join zac_sub_account_deposit subAccountDeposit on subAccountDeposit.`sub_account_id` = subAccountBase.`sub_account_id` and subAccountDeposit.`record_status` != 0
        where subAccountBase.`record_status` != 0
        <if test="conditionList != null">
            <foreach collection="conditionList" item="item" index="index">
                <choose>
                    <when test="item.dbOp == 'in' ">
                        and ${item.colName} IN
                        <foreach collection="item.value" item="key" open="(" separator="," close=")">
                            #{key}
                        </foreach>
                    </when>
                    <when test="item.dbOp == 'like' ">
                        and ${item.colName} like #{item.value}
                    </when>
                    <otherwise>
                        and ${item.colName} ${item.dbOp} #{item.value}
                    </otherwise>
                </choose>
            </foreach>
        </if>
        <if test="compositeOrderList != null">
            order by
            <foreach collection="compositeOrderList" item="item" index="index"
                     separator=",">
                ${item.colName} ${item.direction}
            </foreach>
        </if>
        limit #{startNum},#{pageSize}
    </select>
    <select id="findByAdminQueryForPagerCount" parameterType="map" resultType="Integer">
        select count(1) as count
        from zac_sub_account_base subAccountBase
        left join zac_account_base accountBase on accountBase.`account_id` = subAccountBase.`account_id` and accountBase.`record_status` != 0
        left join zac_sub_account_deposit subAccountDeposit on subAccountDeposit.`sub_account_id` = subAccountBase.`sub_account_id` and subAccountDeposit.`record_status` != 0
        where subAccountBase.`record_status` != 0
        <if test="conditionList != null">
            <foreach collection="conditionList" item="item" index="index">
                <choose>
                    <when test="item.dbOp == 'in' ">
                        and ${item.colName} IN
                        <foreach collection="item.value" item="key" open="(" separator="," close=")">
                            #{key}
                        </foreach>
                    </when>
                    <when test="item.dbOp == 'like' ">
                        and ${item.colName} like #{item.value}
                    </when>
                    <otherwise>
                        and ${item.colName} ${item.dbOp} #{item.value}
                    </otherwise>
                </choose>
            </foreach>
        </if>
    </select>
    <select id="findByAdminQueryForPagerMap" parameterType="map" resultType="map">
        select
        <if test="expressionMap != null">
            <foreach collection="expressionMap" item="item" index="index" separator=",">
                ${item} as ${index}
            </foreach>
        </if>
        from zac_sub_account_base subAccountBase
        left join zac_account_base accountBase on accountBase.`account_id` = subAccountBase.`account_id` and accountBase.`record_status` != 0
        left join zac_sub_account_deposit subAccountDeposit on subAccountDeposit.`sub_account_id` = subAccountBase.`sub_account_id` and subAccountDeposit.`record_status` != 0
        where subAccountBase.`record_status` != 0
        <if test="conditionList != null">
            <foreach collection="conditionList" item="item" index="index">
                <choose>
                    <when test="item.dbOp == 'in' ">
                        and ${item.colName} IN
                        <foreach collection="item.value" item="key" open="(" separator="," close=")">
                            #{key}
                        </foreach>
                    </when>
                    <when test="item.dbOp == 'like' ">
                        and ${item.colName} like #{item.value}
                    </when>
                    <otherwise>
                        and ${item.colName} ${item.dbOp} #{item.value}
                    </otherwise>
                </choose>
            </foreach>
        </if>
        <if test="group_by != null">
            group by
            <foreach collection="group_by" item="item" index="index" separator=",">
                ${item}
            </foreach>
        </if>
    </select>



    <!-- 关联查询 -->
    <select id="findSubAccountBaseByShopIdandType" parameterType="map" resultType="map">
        SELECT
        saba.sub_account_id subAccountId,
        saba.balance,
        ab.shop_id shopId,
        ab.shop_name shopName,
        saba.`status`
        FROM
        zac_sub_account_deposit sad
        JOIN zac_sub_account_base saba ON sad.sub_account_id = saba.sub_account_id
        JOIN zac_sub_account sa ON sad.sub_account_id = sa.id
        JOIN zac_account_base ab ON sa.account_id = ab.account_id
        where sad.record_status !=0 and saba.record_status !=0 and sa.record_status !=0 and ab.record_status !=0
        <if test="conditionList != null">
            <foreach collection="conditionList" item="item" index="index">
                <choose>
                    <when test="item.dbOp == 'in' ">
                        and ${item.colName} IN
                        <foreach collection="item.value" item="key" open="(" separator="," close=")">
                            #{key}
                        </foreach>
                    </when>
                    <when test="item.dbOp == 'like' ">
                        and ${item.colName} like #{item.value}
                    </when>
                    <otherwise>
                        and ${item.colName} ${item.dbOp} #{item.value}
                    </otherwise>
                </choose>
            </foreach>
        </if>
        <if test="compositeOrderList != null">
            order by
            <foreach collection="compositeOrderList" item="item" index="index"
                     separator=",">
                ${item.colName} ${item.direction}
            </foreach>
        </if>
        limit #{startNum},#{pageSize}
    </select>
    <select id="findSubAccountBaseByShopIdandTypeCount" parameterType="map" resultType="Integer">
        select count(1) as count
        FROM
        zac_sub_account_deposit sad
        JOIN zac_sub_account_base saba ON sad.sub_account_id = saba.sub_account_id
        JOIN zac_sub_account sa ON sad.sub_account_id = sa.id
        JOIN zac_account_base ab ON sa.account_id = ab.account_id
        where sad.record_status !=0 and saba.record_status !=0 and sa.record_status !=0 and ab.record_status !=0
        <if test="conditionList != null">
            <foreach collection="conditionList" item="item" index="index">
                <choose>
                    <when test="item.dbOp == 'in' ">
                        and ${item.colName} IN
                        <foreach collection="item.value" item="key" open="(" separator="," close=")">
                            #{key}
                        </foreach>
                    </when>
                    <when test="item.dbOp == 'like' ">
                        and ${item.colName} like #{item.value}
                    </when>
                    <otherwise>
                        and ${item.colName} ${item.dbOp} #{item.value}
                    </otherwise>
                </choose>
            </foreach>
        </if>
    </select>



    <!-- 根据条件查询账户中心-子账户余额管理管理列表 -->
    <select id="findBalanceOrRedPacketAccountForPager" parameterType="map" resultMap="zac_sub_account_base_map">
        select distinct
        subAccountBase.`id`
        ,subAccountBase.`create_time`
        ,subAccountBase.`modify_time`
        ,subAccountBase.`account_id`
        ,subAccountBase.`sub_account_id`
        ,subAccountBase.`balance`
        ,subAccountBase.`type`
        ,subAccountBase.`status`
        ,subAccountBase.`expire_date`
        ,subAccountBase.`version`
        ,subAccountBase.`creator_id`
        ,subAccountBase.`modifier_id`
        ,subAccountBase.`record_status`
        from zac_sub_account_base subAccountBase
        left join zac_account_base accountBase on accountBase.`account_id` = subAccountBase.`account_id` and accountBase.`record_status` != 0
        left join zc_shop s on accountBase.shop_id = s.id and s.`record_status`!=0
        left join zb_area a on a.id = s.area_id and a.`record_status`!=0
        where subAccountBase.`record_status` != 0
        <if test="conditionList != null">
            <foreach collection="conditionList" item="item" index="index">
                <choose>
                    <when test="item.dbOp == 'in' ">
                        and ${item.colName} IN
                        <foreach collection="item.value" item="key" open="(" separator="," close=")">
                            #{key}
                        </foreach>
                    </when>
                    <when test="item.dbOp == 'like' ">
                        and ${item.colName} like #{item.value}
                    </when>
                    <otherwise>
                        and ${item.colName} ${item.dbOp} #{item.value}
                    </otherwise>
                </choose>
            </foreach>
        </if>
        <if test="compositeOrderList != null">
            order by
            <foreach collection="compositeOrderList" item="item" index="index"
                     separator=",">
                ${item.colName} ${item.direction}
            </foreach>
        </if>
        limit #{startNum},#{pageSize}
    </select>
    <select id="findBalanceOrRedPacketAccountForPagerCount" parameterType="map" resultType="Integer">
        select count(1) as count
        from zac_sub_account_base subAccountBase
        left join zac_account_base accountBase on accountBase.`account_id` = subAccountBase.`account_id` and accountBase.`record_status` != 0
        left join zc_shop s on accountBase.shop_id = s.id and s.`record_status`!=0
        left join zb_area a on a.id = s.area_id and a.`record_status`!=0
        where subAccountBase.`record_status` != 0
        <if test="conditionList != null">
            <foreach collection="conditionList" item="item" index="index">
                <choose>
                    <when test="item.dbOp == 'in' ">
                        and ${item.colName} IN
                        <foreach collection="item.value" item="key" open="(" separator="," close=")">
                            #{key}
                        </foreach>
                    </when>
                    <when test="item.dbOp == 'like' ">
                        and ${item.colName} like #{item.value}
                    </when>
                    <otherwise>
                        and ${item.colName} ${item.dbOp} #{item.value}
                    </otherwise>
                </choose>
            </foreach>
        </if>
    </select>

    <select id="findBalanceOrRedPacketAccountForPagerMap" parameterType="map" resultType="map">
        select
        <if test="expressionMap != null">
            <foreach collection="expressionMap" item="item" index="index" separator=",">
                ${item} as ${index}
            </foreach>
        </if>
        from zac_sub_account_base subAccountBase
        left join zac_account_base accountBase on accountBase.`account_id` = subAccountBase.`account_id` and accountBase.`record_status` != 0
        left join zc_shop s on accountBase.shop_id = s.id and s.`record_status`!=0
        left join zb_area a on a.id = s.area_id and a.`record_status`!=0
        where subAccountBase.`record_status` != 0
        <if test="conditionList != null">
            <foreach collection="conditionList" item="item" index="index">
                <choose>
                    <when test="item.dbOp == 'in' ">
                        and ${item.colName} IN
                        <foreach collection="item.value" item="key" open="(" separator="," close=")">
                            #{key}
                        </foreach>
                    </when>
                    <when test="item.dbOp == 'like' ">
                        and ${item.colName} like #{item.value}
                    </when>
                    <otherwise>
                        and ${item.colName} ${item.dbOp} #{item.value}
                    </otherwise>
                </choose>
            </foreach>
        </if>
        <if test="group_by != null">
            group by
            <foreach collection="group_by" item="item" index="index" separator=",">
                ${item}
            </foreach>
        </if>
    </select>



</mapper>
