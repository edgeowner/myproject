<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="${daoBasePackage}.${moduleName}.impl.${classname}DaoImpl">
    <resultMap id="${tablename}_map" type="${domainBasePackage}.${moduleName}.${classname}Domain">
#foreach($row in $collist)
#if(${row.newfield_name} == "id")
        <result property="${row.newfield_name}" column="${row.column_name}" javaType="java.lang.Long"/>
#else
#if(${row.newfield_name} != "creatorId" && ${row.newfield_name} != "modifierId" && ${row.newfield_name} != "createTime" && ${row.newfield_name} !="modifyTime")
        <result property="${row.newfield_name}" column="${row.column_name}"/>
#end
#end
#end
    </resultMap>
#set ($key=1)
#foreach($row in $collist)
#if(${row.column_key} == "PRI")
    #set ($key=${row.newfield_name})
#end
#end

    <sql id="Base_Column_List">
#foreach($row in $collist)
#if(${row.column_key} == "PRI")
        `${row.column_name}`
#end
#end
#foreach($row in $collist)
#if(${row.column_key} != "PRI" && ${row.column_name} != "create_time" && ${row.column_name} != "modify_time" && ${row.column_name} != "creator_id" && ${row.column_name} != "modifier_id")
        ,`${row.column_name}`
#end
#end
    </sql>

    <sql id="Base_Mapper_Column_List">
#foreach($row in $collist)
#if(${row.column_key} == "PRI")
        `${row.column_name}` as `${row.newfield_name}`
#end
#end
#foreach($row in $collist)
#if(${row.column_key} != "PRI" && ${row.column_name} != "create_time" && ${row.column_name} != "modify_time" && ${row.column_name} != "creator_id" && ${row.column_name} != "modifier_id" )
        ,`${row.column_name}` as `${row.newfield_name}`
#end
#end
    </sql>

    <insert id="create" parameterType="${domainBasePackage}.${moduleName}.${classname}Domain">
        insert into ${tablename} (
        <trim prefixOverrides=",">
            $key
#foreach($row in $collist)
#if(${row.column_key} != "PRI" && ${row.newfield_name} != "createTime" && ${row.newfield_name} !="modifyTime")
            <if test="${row.newfield_name} != null">
                ,`${row.column_name}`
            </if>
#end
#end
        </trim>
        ) values (
        <trim prefixOverrides=",">
#foreach($row in $collist)
#if(${row.column_key} == "PRI")
            #{${row.newfield_name}}
#end
#end
#foreach($row in $collist)
#if(${row.column_key} != "PRI" && ${row.newfield_name} != "createTime" && ${row.newfield_name} !="modifyTime")
            <if test="${row.newfield_name} != null">
                , #{${row.newfield_name}}
            </if>
#end
#end
        </trim>
        )
    </insert>
    <update id="update" parameterType="${domainBasePackage}.${moduleName}.${classname}Domain">
        update ${tablename}
        <set>
#foreach($row in $collist)
#if(${row.column_key} != "PRI")
#if(${row.newfield_name} != "creatorId" && ${row.newfield_name} !=
    "createTime"  && ${row.newfield_name} != "modifyTime"   && ${row.newfield_name} !=
    "recordStatus" )
            `${row.column_name}` =#{${row.newfield_name}},
#end
#end
#end
        </set>
        where
#foreach($row in $collist)
#if(${row.column_key} == "PRI")
        `${row.column_name}` = #{${row.newfield_name}}
#end
#end
    </update>
    <update id="merge" parameterType="${domainBasePackage}.${moduleName}.${classname}Domain">
        update ${tablename}
        <set>
#foreach($row in $collist)
#if(${row.column_key} != "PRI")
#if(${row.newfield_name} != "creatorId" && ${row.newfield_name} !=
    "createTime"  && ${row.newfield_name} != "modifyTime"   && ${row.newfield_name} != "recordStatus"  )
            <if test="${row.newfield_name} != null">
                `${row.column_name}` = #{${row.newfield_name}},
            </if>
#end
#end
#end
        </set>
        where
#foreach($row in $collist)
#if(${row.column_key} == "PRI")
        `${row.column_name}` = #{${row.newfield_name}}
#end
#end
    </update>

    <update id="mergeByBeanProp" parameterType="map">
        update ${tablename}
        <set>
#foreach($row in $collist)
#if(${row.column_key} != "PRI")
#if(${row.newfield_name} != "creatorId" && ${row.newfield_name} !=
    "createTime"  && ${row.newfield_name} != "modifyTime"   && ${row.newfield_name} != "recordStatus"  )
            <if test="tage.${row.newfield_name} != null">
                `${row.column_name}` = #{tage.${row.newfield_name}},
            </if>
#end
#end
#end
        </set>
        where `record_status`!=0
#foreach($row in $collist)
#if(${row.newfield_name} != "recordStatus" && ${row.newfield_name} != "createTime" && ${row.newfield_name} != "modifyTime" && ${row.newfield_name} != "creatorId"&& ${row.newfield_name} != "modifierId")
#if(${row.coltype} == "String")
        <if test="sour.${row.newfield_name} != null">
            and `${row.column_name}` = #{sour.${row.newfield_name}}
        </if>
#end
#if(${row.coltype} == "Integer")
        <if test="sour.${row.newfield_name} != null">
            and `${row.column_name}` = #{sour.${row.newfield_name}}
        </if>
#end
#if(${row.coltype} == "Long")
        <if test="sour.${row.newfield_name} != null">
            and `${row.column_name}` = #{sour.${row.newfield_name}}
        </if>
#end
#end
#end
    </update>

    <delete id="remove" parameterType="Long">
        update ${tablename}
        <set>
            `record_status` = 0
        </set>
        where
#foreach($row in $collist)
#if(${row.column_key} == "PRI")
        `${row.column_name}` = #{${row.newfield_name}}
#end
#end
    </delete>
    <select id="findAll" resultMap="${tablename}_map">
        select
        <include refid="Base_Column_List"/>
        from ${tablename} where `record_status`!=0
    </select>

    <select id="find" resultMap="${tablename}_map" parameterType="Long">
        select
        <include refid="Base_Column_List"/>
        from ${tablename}
        where
#foreach($row in $collist)
#if(${row.column_key} == "PRI")
        `${row.column_name}` = #{${row.newfield_name}}
#end
#end
        and `record_status`!=0
    </select>
    <select id="findByPKList" resultMap="${tablename}_map" parameterType="List">
        select
        <include refid="Base_Column_List"/>
        from ${tablename}
        where
#foreach($row in $collist)
#if(${row.column_key} == "PRI")
        `${row.column_name}` in
#end
#end
    <foreach collection="list" item="key" open="(" separator="," close=")">
        #{key}
    </foreach>
        and `record_status`!=0

    </select>

    <select id="findCountByBeanProp" parameterType="${domainBasePackage}.${moduleName}.${classname}Domain" resultType="Integer">
        select count(1)
        as count
        from ${tablename}
        where `record_status`!=0
#foreach($row in $collist)
#if(${row.newfield_name} != "recordStatus" && ${row.newfield_name} != "createTime" && ${row.newfield_name} != "modifyTime" && ${row.newfield_name} != "creatorId"&& ${row.newfield_name} != "modifierId")
#if(${row.coltype} == "String")
        <if test="${row.newfield_name} != null">
            and `${row.column_name}` = #{${row.newfield_name}}
        </if>
#end
#if(${row.coltype} == "Integer")
        <if test="${row.newfield_name} != null">
            and `${row.column_name}` = #{${row.newfield_name}}
        </if>
#end
#if(${row.coltype} == "Long")
        <if test="${row.newfield_name} != null">
            and `${row.column_name}` = #{${row.newfield_name}}
        </if>
#end
#end
#end
    </select>

    <select id="findByBeanProp" parameterType="${domainBasePackage}.${moduleName}.${classname}Domain" resultMap="${tablename}_map">
        select
        <include refid="Base_Column_List"/>
        from ${tablename}
        where `record_status`!=0
#foreach($row in $collist)
#if(${row.newfield_name} != "recordStatus" && ${row.newfield_name} != "createTime" && ${row.newfield_name} != "modifyTime" && ${row.newfield_name} != "creatorId"&& ${row.newfield_name} != "modifierId")
#if(${row.coltype} == "String")
        <if test="${row.newfield_name} != null">
            and `${row.column_name}` = #{${row.newfield_name}}
        </if>
#end
#if(${row.coltype} == "Integer")
        <if test="${row.newfield_name} != null">
            and `${row.column_name}` = #{${row.newfield_name}}
        </if>
#end
#if(${row.coltype} == "Long")
        <if test="${row.newfield_name} != null">
            and `${row.column_name}` = #{${row.newfield_name}}
        </if>
#end
#end
#end
    </select>

    <select id="findByBeanPropWithOrder" parameterType="${domainBasePackage}.${moduleName}.${classname}Domain" resultMap="${tablename}_map">
        select
        <include refid="Base_Column_List"/>
        from ${tablename}
        where `record_status`!=0
#foreach($row in $collist)
#if(${row.newfield_name} != "recordStatus" && ${row.newfield_name} != "createTime" && ${row.newfield_name} != "modifyTime" && ${row.newfield_name} != "creatorId"&& ${row.newfield_name} != "modifierId")
#if(${row.coltype} == "String")
        <if test="dom.${row.newfield_name} != null">
            and `${row.column_name}` = #{dom.${row.newfield_name}}
        </if>
#end
#if(${row.coltype} == "Integer")
        <if test="dom.${row.newfield_name} != null">
            and `${row.column_name}` = #{dom.${row.newfield_name}}
        </if>
#end
#if(${row.coltype} == "Long")
        <if test="dom.${row.newfield_name} != null">
            and `${row.column_name}` = #{dom.${row.newfield_name}}
        </if>
#end
#end
#end
        order by
        <foreach collection="compositeOrderList" item="item" index="index"
                 separator=",">
            ${item.colName} ${item.direction}
        </foreach>
    </select>

    <select id="findForPager" parameterType="map" resultMap="${tablename}_map">
        select
        <include refid="Base_Column_List"/>
        from ${tablename} where `record_status`!=0
#foreach($row in $collist)
#if(${row.newfield_name} != "recordStatus" && ${row.newfield_name} != "createTime" && ${row.newfield_name} != "modifyTime" && ${row.newfield_name} != "creatorId"&& ${row.newfield_name} != "modifierId")
#if(${row.coltype} == "String")
        <if test="${row.newfield_name} != null">
            and `${row.column_name}` = #{${row.newfield_name}}
        </if>
#end
#if(${row.coltype} == "Integer")
        <if test="${row.newfield_name} != null">
            and `${row.column_name}` = #{${row.newfield_name}}
        </if>
#end
#if(${row.coltype} == "Long")
        <if test="${row.newfield_name} != null">
            and `${row.column_name}` = #{${row.newfield_name}}
        </if>
#end
#end
#end
        limit #{startNum},#{pageSize}
    </select>
    <select id="findForPagerCount" parameterType="${domainBasePackage}.${moduleName}.${classname}Domain" resultType="Integer">
        select count(1) as count from ${tablename} where `record_status`!=0
#foreach($row in $collist)
#if(${row.newfield_name} != "recordStatus" && ${row.newfield_name} != "createTime" && ${row.newfield_name} != "modifyTime" && ${row.newfield_name} != "creatorId"&& ${row.newfield_name} != "modifierId")
#if(${row.coltype} == "String")
        <if test="${row.newfield_name} != null">
            and `${row.column_name}` = #{${row.newfield_name}}
        </if>
#end
#if(${row.coltype} == "Integer")
        <if test="${row.newfield_name} != null">
            and `${row.column_name}` = #{${row.newfield_name}}
        </if>
#end
#if(${row.coltype} == "Long")
        <if test="${row.newfield_name} != null">
            and `${row.column_name}` = #{${row.newfield_name}}
        </if>
#end
#end
#end
    </select>

    <select id="dyFindForPager" parameterType="map" resultMap="${tablename}_map">
        select
        <include refid="Base_Column_List"/>
        <if test="group_by != null">
            ,count(1) as groupCount
        </if>
        from ${tablename} where `record_status`!=0
        <if test="conditionList != null">
            <foreach collection="conditionList" item="item" index="index">
                <choose>
                    <when test="item.dbOp == 'in' ">
                        and `${item.colName}` IN
                        <foreach collection="item.value" item="key" open="(" separator="," close=")">
                            #{key}
                        </foreach>
                    </when>
                    <when test="item.dbOp == 'like' ">
                        and `${item.colName}` like #{item.value}
                    </when>
                    <otherwise>
                        and `${item.colName}` ${item.dbOp} #{item.value}
                    </otherwise>
                </choose>
            </foreach>
        </if>
        <if test="group_by != null">
            group by
            <foreach collection="group_by" item="item" index="index" separator=",">
                ${item}
            </foreach>
        </if>
        <if test="order != null">
            order by
            <foreach collection="order" item="item" index="index" separator=",">
                `${item}`
            </foreach>
        </if>
        <if test="direction != null">
            ${direction}
        </if>
        <if test="compositeOrderList != null">
            order by
            <foreach collection="compositeOrderList" item="item" index="index"
                     separator=",">
                ${item.colName} ${item.direction}
            </foreach>
        </if>
        limit #{startNum},#{pageSize}
    </select>
    <select id="dyFindForPagerCount" parameterType="map" resultType="Integer">
        <if test="group_by != null">
            select count(1) group_count
            from(
        </if>
        select count(1) as count
        from ${tablename}
        where `record_status`!=0
        <if test="conditionList != null">
            <foreach collection="conditionList" item="item" index="index">
                <choose>
                    <when test="item.dbOp == 'in' ">
                        and `${item.colName}` IN
                        <foreach collection="item.value" item="key" open="(" separator="," close=")">
                            #{key}
                        </foreach>
                    </when>
                    <when test="item.dbOp == 'like' ">
                        and `${item.colName}` like #{item.value}
                    </when>
                    <otherwise>
                        and `${item.colName}` ${item.dbOp} #{item.value}
                    </otherwise>
                </choose>
            </foreach>
        </if>
        <if test="group_by != null">
            group by
            <foreach collection="group_by" item="item" index="index" separator=",">
                ${item}
            </foreach>
            ) as group_table
        </if>
    </select>

    <select id="dyFindForPagerMap" parameterType="map" resultType="map">
        select
        <if test="expressionMap != null">
            <foreach collection="expressionMap" item="item" index="index" separator=",">
                ${item} as ${index}
            </foreach>
        </if>
        from ${tablename} where `record_status`!=0
        <if test="conditionList != null">
            <foreach collection="conditionList" item="item" index="index">
                <choose>
                    <when test="item.dbOp == 'in' ">
                        and `${item.colName}` IN
                        <foreach collection="item.value" item="key" open="(" separator="," close=")">
                            #{key}
                        </foreach>
                    </when>
                    <when test="item.dbOp == 'like' ">
                        and `${item.colName}` like #{item.value}
                    </when>
                    <otherwise>
                        and `${item.colName}` ${item.dbOp} #{item.value}
                    </otherwise>
                </choose>
            </foreach>
        </if>
        <if test="group_by != null">
            group by
            <foreach collection="group_by" item="item" index="index" separator=",">
                ${item}
            </foreach>
        </if>
    </select>

    <select id="findForPagerMap" parameterType="map" resultType="map">
        select
        <include refid="Base_Mapper_Column_List"/>
        from ${tablename}
        where `record_status`!=0
        <if test="conditionList != null">
            <foreach collection="conditionList" item="item" index="index">
                <choose>
                    <when test="item.dbOp == 'in' ">
                        and ${item.colName} IN
                        <foreach collection="item.value" item="key" open="(" separator="," close=")">
                            #{key}
                        </foreach>
                    </when>
                    <when test="item.dbOp == 'like' ">
                        and ${item.colName} like #{item.value}
                    </when>
                    <otherwise>
                        and ${item.colName} ${item.dbOp} #{item.value}
                    </otherwise>
                </choose>
            </foreach>
        </if>
        <if test="order != null">
            order by
            <foreach collection="order" item="item" index="index" separator=",">
                ${item}
            </foreach>
        </if>
        <if test="direction != null">
            ${direction}
        </if>
        <if test="compositeOrderList != null">
            order by
            <foreach collection="compositeOrderList" item="item" index="index"
                     separator=",">
                ${item.colName} ${item.direction}
            </foreach>
        </if>
        limit #{startNum},#{pageSize}
    </select>
    <select id="findForPagerMapCount" parameterType="map" resultType="Integer">
        select count(1) as count
        from ${tablename}
        where `record_status`!=0
        <if test="conditionList != null">
            <foreach collection="conditionList" item="item" index="index">
                <choose>
                    <when test="item.dbOp == 'in' ">
                        and ${item.colName} IN
                        <foreach collection="item.value" item="key" open="(" separator="," close=")">
                            #{key}
                        </foreach>
                    </when>
                    <when test="item.dbOp == 'like' ">
                        and ${item.colName} like #{item.value}
                    </when>
                    <otherwise>
                        and ${item.colName} ${item.dbOp} #{item.value}
                    </otherwise>
                </choose>
            </foreach>
        </if>
    </select>
    <select id="countWithGroupBy" parameterType="map" resultType="map">
        select
        count(1) as count
        <if test="group_by != null">
            <foreach collection="group_by" item="item" index="index" open=","
                     separator=",">
                ${item}
            </foreach>
        </if>
        from ${tablename} where `recordStatus`!=0
        <if test="conditionList != null">
            <foreach collection="conditionList" item="item" index="index">
                <choose>
                    <when test="item.dbOp == 'in' ">
                        and ${item.colName} IN
                        <foreach collection="item.value" item="key" open="(" separator="," close=")">
                            #{key}
                        </foreach>
                    </when>
                    <when test="item.dbOp == 'like' ">
                        and ${item.colName} like #{item.value}
                    </when>
                    <otherwise>
                        and ${item.colName} ${item.dbOp} #{item.value}
                    </otherwise>
                </choose>
            </foreach>
        </if>
        <if test="group_by != null">
            group by
            <foreach collection="group_by" item="item" index="index" separator=",">
                ${item}
            </foreach>
        </if>
        <if test="order != null">
            order by
            <foreach collection="order" item="item" index="index" separator=",">
                ${item}
            </foreach>
        </if>
        <if test="direction != null">
            ${direction}
        </if>
        <if test="compositeOrderList != null">
            order by
            <foreach collection="compositeOrderList" item="item" index="index" separator=",">
                ${item.colName} ${item.direction}
            </foreach>
        </if>
    </select>

    <select id="findForMap" parameterType="map" resultType="map">
        select
        <if test="expressionMap != null">
            <foreach collection="expressionMap" item="item" index="index" separator=",">
                ${item} as ${index}
            </foreach>
        </if>
        from ${tablename} where `record_status`!=0
        <if test="conditionList != null">
            <foreach collection="conditionList" item="item" index="index">
                <choose>
                    <when test="item.dbOp == 'in' ">
                        and `${item.colName}` IN
                        <foreach collection="item.value" item="key" open="(" separator="," close=")">
                            #{key}
                        </foreach>
                    </when>
                    <when test="item.dbOp == 'like' ">
                        and `${item.colName}` like #{item.value}
                    </when>
                    <otherwise>
                        and `${item.colName}` ${item.dbOp} #{item.value}
                    </otherwise>
                </choose>
            </foreach>
        </if>
        <if test="group_by != null">
            group by
            <foreach collection="group_by" item="item" index="index" separator=",">
                ${item}
            </foreach>
        </if>
    </select>
</mapper>
